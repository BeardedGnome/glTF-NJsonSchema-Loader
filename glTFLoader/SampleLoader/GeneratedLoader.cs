//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v8.34.6331.29178 (http://NJsonSchema.org)
// </auto-generated>
//----------------------

namespace glTFGeneratedLoader
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class Json3 
    {
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, object> Extensions { get; set; } = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extras { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Json3 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Json3>(data);
        }
    }
    
    /// <summary>Indices of those attributes that deviate from their initialization value.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class Json4 : Json3
    {
        /// <summary>The index of the bufferView with sparse indices. Referenced bufferView can't have ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER target.</summary>
        [Newtonsoft.Json.JsonProperty("bufferView", Required = Newtonsoft.Json.Required.Always)]
        public BufferView BufferView { get; set; }
    
        /// <summary>The offset relative to the start of the bufferView in bytes. Must be aligned.</summary>
        [Newtonsoft.Json.JsonProperty("byteOffset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, double.MaxValue)]
        public int ByteOffset { get; set; } = 0;
    
        /// <summary>The indices data type.</summary>
        [Newtonsoft.Json.JsonProperty("componentType", Required = Newtonsoft.Json.Required.Always)]
        public ComponentType ComponentType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extras { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Json4 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Json4>(data);
        }
    }
    
    /// <summary>Array of size `accessor.sparse.count` times number of components storing the displaced accessor attributes pointed by `accessor.sparse.indices`.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class Json5 : Json3
    {
        /// <summary>The index of the bufferView with sparse values. Referenced bufferView can't have ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER target.</summary>
        [Newtonsoft.Json.JsonProperty("bufferView", Required = Newtonsoft.Json.Required.Always)]
        public BufferView2 BufferView { get; set; }
    
        /// <summary>The offset relative to the start of the bufferView in bytes. Must be aligned.</summary>
        [Newtonsoft.Json.JsonProperty("byteOffset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, double.MaxValue)]
        public int ByteOffset { get; set; } = 0;
    
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extras { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Json5 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Json5>(data);
        }
    }
    
    /// <summary>Sparse storage of attributes that deviate from their initialization value.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class Json6 : Json3
    {
        /// <summary>Number of entries stored in the sparse array.</summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, double.MaxValue)]
        public int Count { get; set; }
    
        /// <summary>Index array of size `count` that points to those accessor attributes that deviate from their initialization value. Indices must strictly increase.</summary>
        [Newtonsoft.Json.JsonProperty("indices", Required = Newtonsoft.Json.Required.Always)]
        public Indices Indices { get; set; }
    
        /// <summary>Array of size `count` times number of components, storing the displaced accessor attributes pointed by `indices`. Substituted values must have the same `componentType` and number of components as the base accessor.</summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.Always)]
        public Values Values { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extras { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Json6 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Json6>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class Json7 : Json3
    {
        /// <summary>The user-defined name of this object.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Json7 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Json7>(data);
        }
    }
    
    /// <summary>A typed view into a bufferView.  A bufferView contains raw binary data.  An accessor provides a typed view into a bufferView or a subset of a bufferView similar to how WebGL's `vertexAttribPointer()` defines an attribute in a buffer.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class Json8 : Json7
    {
        /// <summary>The index of the bufferView.</summary>
        [Newtonsoft.Json.JsonProperty("bufferView", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BufferView3 BufferView { get; set; }
    
        /// <summary>The offset relative to the start of the bufferView in bytes.</summary>
        [Newtonsoft.Json.JsonProperty("byteOffset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, double.MaxValue)]
        public int ByteOffset { get; set; } = 0;
    
        /// <summary>The datatype of components in the attribute.</summary>
        [Newtonsoft.Json.JsonProperty("componentType", Required = Newtonsoft.Json.Required.Always)]
        public ComponentType2 ComponentType { get; set; }
    
        /// <summary>Specifies whether integer data values should be normalized.</summary>
        [Newtonsoft.Json.JsonProperty("normalized", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Normalized { get; set; } = false;
    
        /// <summary>The number of attributes referenced by this accessor.</summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, double.MaxValue)]
        public int Count { get; set; }
    
        /// <summary>Specifies if the attribute is a scalar, vector, or matrix.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        public Type Type { get; set; }
    
        /// <summary>Maximum value of each component in this attribute.</summary>
        [Newtonsoft.Json.JsonProperty("max", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<double> Max { get; set; } = new System.Collections.ObjectModel.ObservableCollection<double>();
    
        /// <summary>Minimum value of each component in this attribute.</summary>
        [Newtonsoft.Json.JsonProperty("min", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<double> Min { get; set; } = new System.Collections.ObjectModel.ObservableCollection<double>();
    
        /// <summary>Sparse storage of attributes that deviate from their initialization value.</summary>
        [Newtonsoft.Json.JsonProperty("sparse", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Sparse Sparse { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extras { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Json8 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Json8>(data);
        }
    }
    
    /// <summary>The index of the node and TRS property that an animation channel targets.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class Json9 : Json3
    {
        /// <summary>The index of the node to target.</summary>
        [Newtonsoft.Json.JsonProperty("node", Required = Newtonsoft.Json.Required.Always)]
        public Node Node { get; set; }
    
        /// <summary>The name of the node's TRS property to modify, or the "weights" of the Morph Targets it instantiates.</summary>
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Always)]
        public Path Path { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extras { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Json9 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Json9>(data);
        }
    }
    
    /// <summary>Targets an animation's sampler at a node's property.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class Json10 : Json3
    {
        /// <summary>The index of a sampler in this animation used to compute the value for the target.</summary>
        [Newtonsoft.Json.JsonProperty("sampler", Required = Newtonsoft.Json.Required.Always)]
        public Sampler Sampler { get; set; }
    
        /// <summary>The index of the node and TRS property to target.</summary>
        [Newtonsoft.Json.JsonProperty("target", Required = Newtonsoft.Json.Required.Always)]
        public Target Target { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extras { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Json10 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Json10>(data);
        }
    }
    
    /// <summary>Combines input and output accessors with an interpolation algorithm to define a keyframe graph (but not its target).</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class Json11 : Json3
    {
        /// <summary>The index of an accessor containing keyframe input values, e.g., time.</summary>
        [Newtonsoft.Json.JsonProperty("input", Required = Newtonsoft.Json.Required.Always)]
        public Input Input { get; set; }
    
        /// <summary>Interpolation algorithm.</summary>
        [Newtonsoft.Json.JsonProperty("interpolation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Interpolation Interpolation { get; set; }
    
        /// <summary>The index of an accessor, containing keyframe output values.</summary>
        [Newtonsoft.Json.JsonProperty("output", Required = Newtonsoft.Json.Required.Always)]
        public Output Output { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extras { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Json11 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Json11>(data);
        }
    }
    
    /// <summary>A keyframe animation.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class Json12 : Json7
    {
        /// <summary>An array of channels, each of which targets an animation's sampler at a node's property. Different channels of the same animation can't have equal targets.</summary>
        [Newtonsoft.Json.JsonProperty("channels", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<Json10> Channels { get; set; } = new System.Collections.ObjectModel.ObservableCollection<Json10>();
    
        /// <summary>An array of samplers that combines input and output accessors with an interpolation algorithm to define a keyframe graph (but not its target).</summary>
        [Newtonsoft.Json.JsonProperty("samplers", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<Json11> Samplers { get; set; } = new System.Collections.ObjectModel.ObservableCollection<Json11>();
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extras { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Json12 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Json12>(data);
        }
    }
    
    /// <summary>Metadata about the glTF asset.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class Json13 : Json3
    {
        /// <summary>A copyright message suitable for display to credit the content creator.</summary>
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Copyright { get; set; }
    
        /// <summary>Tool that generated this glTF model.  Useful for debugging.</summary>
        [Newtonsoft.Json.JsonProperty("generator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Generator { get; set; }
    
        /// <summary>The glTF version that this asset targets.</summary>
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]+\.[0-9]+$")]
        public string Version { get; set; }
    
        /// <summary>The minimum glTF version that this asset targets.</summary>
        [Newtonsoft.Json.JsonProperty("minVersion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]+\.[0-9]+$")]
        public string MinVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extras { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Json13 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Json13>(data);
        }
    }
    
    /// <summary>A buffer points to binary geometry, animation, or skins.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class Json14 : Json7
    {
        /// <summary>The uri of the buffer.</summary>
        [Newtonsoft.Json.JsonProperty("uri", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uri { get; set; }
    
        /// <summary>The length of the buffer in bytes.</summary>
        [Newtonsoft.Json.JsonProperty("byteLength", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, double.MaxValue)]
        public int ByteLength { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extras { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Json14 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Json14>(data);
        }
    }
    
    /// <summary>A view into a buffer generally representing a subset of the buffer.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class Json15 : Json7
    {
        /// <summary>The index of the buffer.</summary>
        [Newtonsoft.Json.JsonProperty("buffer", Required = Newtonsoft.Json.Required.Always)]
        public Buffer Buffer { get; set; }
    
        /// <summary>The offset into the buffer in bytes.</summary>
        [Newtonsoft.Json.JsonProperty("byteOffset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, double.MaxValue)]
        public int ByteOffset { get; set; } = 0;
    
        /// <summary>The length of the bufferView in bytes.</summary>
        [Newtonsoft.Json.JsonProperty("byteLength", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, double.MaxValue)]
        public int ByteLength { get; set; }
    
        /// <summary>The stride, in bytes.</summary>
        [Newtonsoft.Json.JsonProperty("byteStride", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(4, 252)]
        public int ByteStride { get; set; }
    
        /// <summary>The target that the GPU buffer should be bound to.</summary>
        [Newtonsoft.Json.JsonProperty("target", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Target2 Target { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extras { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Json15 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Json15>(data);
        }
    }
    
    /// <summary>An orthographic camera containing properties to create an orthographic projection matrix.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class Json16 : Json3
    {
        /// <summary>The floating-point horizontal magnification of the view.</summary>
        [Newtonsoft.Json.JsonProperty("xmag", Required = Newtonsoft.Json.Required.Always)]
        public double Xmag { get; set; }
    
        /// <summary>The floating-point vertical magnification of the view.</summary>
        [Newtonsoft.Json.JsonProperty("ymag", Required = Newtonsoft.Json.Required.Always)]
        public double Ymag { get; set; }
    
        /// <summary>The floating-point distance to the far clipping plane. `zfar` must be greater than `znear`.</summary>
        [Newtonsoft.Json.JsonProperty("zfar", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, double.MaxValue)]
        public double Zfar { get; set; }
    
        /// <summary>The floating-point distance to the near clipping plane.</summary>
        [Newtonsoft.Json.JsonProperty("znear", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, double.MaxValue)]
        public double Znear { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extras { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Json16 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Json16>(data);
        }
    }
    
    /// <summary>A perspective camera containing properties to create a perspective projection matrix.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class Json17 : Json3
    {
        /// <summary>The floating-point aspect ratio of the field of view.</summary>
        [Newtonsoft.Json.JsonProperty("aspectRatio", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, double.MaxValue)]
        public double AspectRatio { get; set; }
    
        /// <summary>The floating-point vertical field of view in radians.</summary>
        [Newtonsoft.Json.JsonProperty("yfov", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, double.MaxValue)]
        public double Yfov { get; set; }
    
        /// <summary>The floating-point distance to the far clipping plane.</summary>
        [Newtonsoft.Json.JsonProperty("zfar", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, double.MaxValue)]
        public double Zfar { get; set; }
    
        /// <summary>The floating-point distance to the near clipping plane.</summary>
        [Newtonsoft.Json.JsonProperty("znear", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, double.MaxValue)]
        public double Znear { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extras { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Json17 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Json17>(data);
        }
    }
    
    /// <summary>A camera's projection.  A node can reference a camera to apply a transform to place the camera in the scene.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class Json18 : Json7
    {
        /// <summary>An orthographic camera containing properties to create an orthographic projection matrix.</summary>
        [Newtonsoft.Json.JsonProperty("orthographic", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Orthographic Orthographic { get; set; }
    
        /// <summary>A perspective camera containing properties to create a perspective projection matrix.</summary>
        [Newtonsoft.Json.JsonProperty("perspective", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Perspective Perspective { get; set; }
    
        /// <summary>Specifies if the camera uses a perspective or orthographic projection.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        public Type2 Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extras { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Json18 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Json18>(data);
        }
    }
    
    /// <summary>Image data used to create a texture. Image can be referenced by URI or `bufferView` index. `mimeType` is required in the latter case.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class Json19 : Json7
    {
        /// <summary>The uri of the image.</summary>
        [Newtonsoft.Json.JsonProperty("uri", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uri { get; set; }
    
        /// <summary>The image's MIME type.</summary>
        [Newtonsoft.Json.JsonProperty("mimeType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MimeType MimeType { get; set; }
    
        /// <summary>The index of the bufferView that contains the image. Use this instead of the image's uri property.</summary>
        [Newtonsoft.Json.JsonProperty("bufferView", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BufferView4 BufferView { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extras { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Json19 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Json19>(data);
        }
    }
    
    /// <summary>Reference to a texture.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class Json20 : Json3
    {
        /// <summary>The index of the texture.</summary>
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Always)]
        public Index Index { get; set; }
    
        /// <summary>The set index of texture's TEXCOORD attribute used for texture coordinate mapping.</summary>
        [Newtonsoft.Json.JsonProperty("texCoord", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, double.MaxValue)]
        public int TexCoord { get; set; } = 0;
    
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extras { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Json20 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Json20>(data);
        }
    }
    
    /// <summary>A set of parameter values that are used to define the metallic-roughness material model from Physically-Based Rendering (PBR) methodology.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class Json21 : Json3
    {
        /// <summary>The material's base color factor.</summary>
        [Newtonsoft.Json.JsonProperty("baseColorFactor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<double> BaseColorFactor { get; set; } = new System.Collections.ObjectModel.ObservableCollection<double>();
    
        /// <summary>The base color texture.</summary>
        [Newtonsoft.Json.JsonProperty("baseColorTexture", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseColorTexture BaseColorTexture { get; set; }
    
        /// <summary>The metalness of the material.</summary>
        [Newtonsoft.Json.JsonProperty("metallicFactor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 1)]
        public double MetallicFactor { get; set; } = 1;
    
        /// <summary>The roughness of the material.</summary>
        [Newtonsoft.Json.JsonProperty("roughnessFactor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 1)]
        public double RoughnessFactor { get; set; } = 1;
    
        /// <summary>The metallic-roughness texture.</summary>
        [Newtonsoft.Json.JsonProperty("metallicRoughnessTexture", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MetallicRoughnessTexture MetallicRoughnessTexture { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extras { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Json21 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Json21>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class Json22 : Json20
    {
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Index { get; set; }
    
        [Newtonsoft.Json.JsonProperty("texCoord", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object TexCoord { get; set; }
    
        /// <summary>The scalar multiplier applied to each normal vector of the normal texture.</summary>
        [Newtonsoft.Json.JsonProperty("scale", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Scale { get; set; } = 1;
    
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extras { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Json22 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Json22>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class Json23 : Json20
    {
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Index { get; set; }
    
        [Newtonsoft.Json.JsonProperty("texCoord", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object TexCoord { get; set; }
    
        /// <summary>A scalar multiplier controlling the amount of occlusion applied.</summary>
        [Newtonsoft.Json.JsonProperty("strength", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 1)]
        public double Strength { get; set; } = 1;
    
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extras { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Json23 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Json23>(data);
        }
    }
    
    /// <summary>The material appearance of a primitive.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class Json24 : Json7
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extras { get; set; }
    
        /// <summary>A set of parameter values that are used to define the metallic-roughness material model from Physically-Based Rendering (PBR) methodology. When not specified, all the default values of `pbrMetallicRoughness` apply.</summary>
        [Newtonsoft.Json.JsonProperty("pbrMetallicRoughness", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PbrMetallicRoughness PbrMetallicRoughness { get; set; }
    
        /// <summary>The normal map texture.</summary>
        [Newtonsoft.Json.JsonProperty("normalTexture", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NormalTexture NormalTexture { get; set; }
    
        /// <summary>The occlusion map texture.</summary>
        [Newtonsoft.Json.JsonProperty("occlusionTexture", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OcclusionTexture OcclusionTexture { get; set; }
    
        /// <summary>The emissive map texture.</summary>
        [Newtonsoft.Json.JsonProperty("emissiveTexture", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EmissiveTexture EmissiveTexture { get; set; }
    
        /// <summary>The emissive color of the material.</summary>
        [Newtonsoft.Json.JsonProperty("emissiveFactor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<double> EmissiveFactor { get; set; } = new System.Collections.ObjectModel.ObservableCollection<double>();
    
        /// <summary>The alpha rendering mode of the material.</summary>
        [Newtonsoft.Json.JsonProperty("alphaMode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AlphaMode AlphaMode { get; set; }
    
        /// <summary>The alpha cutoff value of the material.</summary>
        [Newtonsoft.Json.JsonProperty("alphaCutoff", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, double.MaxValue)]
        public double AlphaCutoff { get; set; } = 0.5;
    
        /// <summary>Specifies whether the material is double sided.</summary>
        [Newtonsoft.Json.JsonProperty("doubleSided", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool DoubleSided { get; set; } = false;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Json24 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Json24>(data);
        }
    }
    
    /// <summary>Geometry to be rendered with the given material.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class Json25 : Json3
    {
        /// <summary>A dictionary object, where each key corresponds to mesh attribute semantic and each value is the index of the accessor containing attribute's data.</summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.Dictionary<string, int> Attributes { get; set; } = new System.Collections.Generic.Dictionary<string, int>();
    
        /// <summary>The index of the accessor that contains the indices.</summary>
        [Newtonsoft.Json.JsonProperty("indices", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Indices2 Indices { get; set; }
    
        /// <summary>The index of the material to apply to this primitive when rendering.</summary>
        [Newtonsoft.Json.JsonProperty("material", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Material Material { get; set; }
    
        /// <summary>The type of primitives to render.</summary>
        [Newtonsoft.Json.JsonProperty("mode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Mode Mode { get; set; }
    
        /// <summary>An array of Morph Targets, each  Morph Target is a dictionary mapping attributes (only `POSITION`, `NORMAL`, and `TANGENT` supported) to their deviations in the Morph Target.</summary>
        [Newtonsoft.Json.JsonProperty("targets", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<System.Collections.Generic.Dictionary<string, int>> Targets { get; set; } = new System.Collections.ObjectModel.ObservableCollection<System.Collections.Generic.Dictionary<string, int>>();
    
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extras { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Json25 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Json25>(data);
        }
    }
    
    /// <summary>A set of primitives to be rendered.  A node can contain one mesh.  A node's transform places the mesh in the scene.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class Json26 : Json7
    {
        /// <summary>An array of primitives, each defining geometry to be rendered with a material.</summary>
        [Newtonsoft.Json.JsonProperty("primitives", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<Json25> Primitives { get; set; } = new System.Collections.ObjectModel.ObservableCollection<Json25>();
    
        /// <summary>Array of weights to be applied to the Morph Targets.</summary>
        [Newtonsoft.Json.JsonProperty("weights", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<double> Weights { get; set; } = new System.Collections.ObjectModel.ObservableCollection<double>();
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extras { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Json26 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Json26>(data);
        }
    }
    
    /// <summary>A node in the node hierarchy.  When the node contains `skin`, all `mesh.primitives` must contain `JOINTS_0` and `WEIGHTS_0` attributes.  A node can have either a `matrix` or any combination of `translation`/`rotation`/`scale` (TRS) properties. TRS properties are converted to matrices and postmultiplied in the `T * R * S` order to compose the transformation matrix; first the scale is applied to the vertices, then the rotation, and then the translation. If none are provided, the transform is the identity. When a node is targeted for animation (referenced by an animation.channel.target), only TRS properties may be present; `matrix` will not be present.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class Json27 : Json7
    {
        /// <summary>The index of the camera referenced by this node.</summary>
        [Newtonsoft.Json.JsonProperty("camera", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Camera Camera { get; set; }
    
        /// <summary>The indices of this node's children.</summary>
        [Newtonsoft.Json.JsonProperty("children", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> Children { get; set; } = new System.Collections.ObjectModel.ObservableCollection<int>();
    
        /// <summary>The index of the skin referenced by this node.</summary>
        [Newtonsoft.Json.JsonProperty("skin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Skin Skin { get; set; }
    
        /// <summary>A floating-point 4x4 transformation matrix stored in column-major order.</summary>
        [Newtonsoft.Json.JsonProperty("matrix", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<double> Matrix { get; set; } = new System.Collections.ObjectModel.ObservableCollection<double>();
    
        /// <summary>The index of the mesh in this node.</summary>
        [Newtonsoft.Json.JsonProperty("mesh", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Mesh Mesh { get; set; }
    
        /// <summary>The node's unit quaternion rotation in the order (x, y, z, w), where w is the scalar.</summary>
        [Newtonsoft.Json.JsonProperty("rotation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<double> Rotation { get; set; } = new System.Collections.ObjectModel.ObservableCollection<double>();
    
        /// <summary>The node's non-uniform scale.</summary>
        [Newtonsoft.Json.JsonProperty("scale", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<double> Scale { get; set; } = new System.Collections.ObjectModel.ObservableCollection<double>();
    
        /// <summary>The node's translation.</summary>
        [Newtonsoft.Json.JsonProperty("translation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<double> Translation { get; set; } = new System.Collections.ObjectModel.ObservableCollection<double>();
    
        /// <summary>The weights of the instantiated Morph Target. Number of elements must match number of Morph Targets of used mesh.</summary>
        [Newtonsoft.Json.JsonProperty("weights", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<double> Weights { get; set; } = new System.Collections.ObjectModel.ObservableCollection<double>();
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extras { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Json27 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Json27>(data);
        }
    }
    
    /// <summary>Texture sampler properties for filtering and wrapping modes.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class Json28 : Json7
    {
        /// <summary>Magnification filter.</summary>
        [Newtonsoft.Json.JsonProperty("magFilter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MagFilter MagFilter { get; set; }
    
        /// <summary>Minification filter.</summary>
        [Newtonsoft.Json.JsonProperty("minFilter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MinFilter MinFilter { get; set; }
    
        /// <summary>s wrapping mode.</summary>
        [Newtonsoft.Json.JsonProperty("wrapS", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WrapS WrapS { get; set; }
    
        /// <summary>t wrapping mode.</summary>
        [Newtonsoft.Json.JsonProperty("wrapT", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WrapT WrapT { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extras { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Json28 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Json28>(data);
        }
    }
    
    /// <summary>The root nodes of a scene.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class Json29 : Json7
    {
        /// <summary>The indices of each root node.</summary>
        [Newtonsoft.Json.JsonProperty("nodes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> Nodes { get; set; } = new System.Collections.ObjectModel.ObservableCollection<int>();
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extras { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Json29 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Json29>(data);
        }
    }
    
    /// <summary>Joints and matrices defining a skin.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class Json30 : Json7
    {
        /// <summary>The index of the accessor containing the floating-point 4x4 inverse-bind matrices.  The default is that each matrix is a 4x4 identity matrix, which implies that inverse-bind matrices were pre-applied.</summary>
        [Newtonsoft.Json.JsonProperty("inverseBindMatrices", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InverseBindMatrices InverseBindMatrices { get; set; }
    
        /// <summary>The index of the node used as a skeleton root. When undefined, joints transforms resolve to scene root.</summary>
        [Newtonsoft.Json.JsonProperty("skeleton", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Skeleton Skeleton { get; set; }
    
        /// <summary>Indices of skeleton nodes, used as joints in this skin.</summary>
        [Newtonsoft.Json.JsonProperty("joints", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<int> Joints { get; set; } = new System.Collections.ObjectModel.ObservableCollection<int>();
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extras { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Json30 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Json30>(data);
        }
    }
    
    /// <summary>A texture and its sampler.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class Json31 : Json7
    {
        /// <summary>The index of the sampler used by this texture. When undefined, a sampler with repeat wrapping and auto filtering should be used.</summary>
        [Newtonsoft.Json.JsonProperty("sampler", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Sampler2 Sampler { get; set; }
    
        /// <summary>The index of the image used by this texture.</summary>
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Source Source { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extras { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Json31 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Json31>(data);
        }
    }
    
    /// <summary>The root object for a glTF asset.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class GlTF : Json3
    {
        /// <summary>Names of glTF extensions used somewhere in this asset.</summary>
        [Newtonsoft.Json.JsonProperty("extensionsUsed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> ExtensionsUsed { get; set; } = new System.Collections.ObjectModel.ObservableCollection<string>();
    
        /// <summary>Names of glTF extensions required to properly load this asset.</summary>
        [Newtonsoft.Json.JsonProperty("extensionsRequired", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> ExtensionsRequired { get; set; } = new System.Collections.ObjectModel.ObservableCollection<string>();
    
        /// <summary>An array of accessors.</summary>
        [Newtonsoft.Json.JsonProperty("accessors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Json8> Accessors { get; set; } = new System.Collections.ObjectModel.ObservableCollection<Json8>();
    
        /// <summary>An array of keyframe animations.</summary>
        [Newtonsoft.Json.JsonProperty("animations", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Json12> Animations { get; set; } = new System.Collections.ObjectModel.ObservableCollection<Json12>();
    
        /// <summary>Metadata about the glTF asset.</summary>
        [Newtonsoft.Json.JsonProperty("asset", Required = Newtonsoft.Json.Required.Always)]
        public Asset Asset { get; set; }
    
        /// <summary>An array of buffers.</summary>
        [Newtonsoft.Json.JsonProperty("buffers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Json14> Buffers { get; set; } = new System.Collections.ObjectModel.ObservableCollection<Json14>();
    
        /// <summary>An array of bufferViews.</summary>
        [Newtonsoft.Json.JsonProperty("bufferViews", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Json15> BufferViews { get; set; } = new System.Collections.ObjectModel.ObservableCollection<Json15>();
    
        /// <summary>An array of cameras.</summary>
        [Newtonsoft.Json.JsonProperty("cameras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Json18> Cameras { get; set; } = new System.Collections.ObjectModel.ObservableCollection<Json18>();
    
        /// <summary>An array of images.</summary>
        [Newtonsoft.Json.JsonProperty("images", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Json19> Images { get; set; } = new System.Collections.ObjectModel.ObservableCollection<Json19>();
    
        /// <summary>An array of materials.</summary>
        [Newtonsoft.Json.JsonProperty("materials", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Json24> Materials { get; set; } = new System.Collections.ObjectModel.ObservableCollection<Json24>();
    
        /// <summary>An array of meshes.</summary>
        [Newtonsoft.Json.JsonProperty("meshes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Json26> Meshes { get; set; } = new System.Collections.ObjectModel.ObservableCollection<Json26>();
    
        /// <summary>An array of nodes.</summary>
        [Newtonsoft.Json.JsonProperty("nodes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Json27> Nodes { get; set; } = new System.Collections.ObjectModel.ObservableCollection<Json27>();
    
        /// <summary>An array of samplers.</summary>
        [Newtonsoft.Json.JsonProperty("samplers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Json28> Samplers { get; set; } = new System.Collections.ObjectModel.ObservableCollection<Json28>();
    
        /// <summary>The index of the default scene.</summary>
        [Newtonsoft.Json.JsonProperty("scene", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scene Scene { get; set; }
    
        /// <summary>An array of scenes.</summary>
        [Newtonsoft.Json.JsonProperty("scenes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Json29> Scenes { get; set; } = new System.Collections.ObjectModel.ObservableCollection<Json29>();
    
        /// <summary>An array of skins.</summary>
        [Newtonsoft.Json.JsonProperty("skins", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Json30> Skins { get; set; } = new System.Collections.ObjectModel.ObservableCollection<Json30>();
    
        /// <summary>An array of textures.</summary>
        [Newtonsoft.Json.JsonProperty("textures", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Json31> Textures { get; set; } = new System.Collections.ObjectModel.ObservableCollection<Json31>();
    
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extras { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GlTF FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GlTF>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class BufferView : int
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BufferView FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BufferView>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class ComponentType 
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ComponentType FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ComponentType>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class BufferView2 : int
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BufferView2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BufferView2>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class Indices : Json4
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Indices FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Indices>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class Values : Json5
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Values FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Values>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class BufferView3 : int
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BufferView3 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BufferView3>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class ComponentType2 
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ComponentType2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ComponentType2>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class Type 
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Type FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Type>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class Sparse : Json6
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Sparse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Sparse>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class Node : int
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Node FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Node>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class Path 
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Path FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Path>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class Sampler : int
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Sampler FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Sampler>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class Target : Json9
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Target FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Target>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class Input : int
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Input FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Input>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class Interpolation 
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Interpolation FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Interpolation>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class Output : int
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Output FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Output>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class Buffer : int
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Buffer FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Buffer>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class Target2 
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Target2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Target2>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class Orthographic : Json16
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Orthographic FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Orthographic>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class Perspective : Json17
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Perspective FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Perspective>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class Type2 
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Type2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Type2>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class MimeType 
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MimeType FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MimeType>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class BufferView4 : int
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BufferView4 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BufferView4>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class Index : int
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Index FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Index>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class BaseColorTexture : Json20
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BaseColorTexture FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseColorTexture>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class MetallicRoughnessTexture : Json20
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MetallicRoughnessTexture FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetallicRoughnessTexture>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class PbrMetallicRoughness : Json21
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PbrMetallicRoughness FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PbrMetallicRoughness>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class NormalTexture : Json22
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NormalTexture FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NormalTexture>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class OcclusionTexture : Json23
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OcclusionTexture FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OcclusionTexture>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class EmissiveTexture : Json20
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static EmissiveTexture FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EmissiveTexture>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class AlphaMode 
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AlphaMode FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AlphaMode>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class Indices2 : int
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Indices2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Indices2>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class Material : int
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Material FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Material>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class Mode 
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Mode FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Mode>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class Camera : int
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Camera FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Camera>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class Skin : int
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Skin FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Skin>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class Mesh : int
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Mesh FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Mesh>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class MagFilter 
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MagFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MagFilter>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class MinFilter 
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MinFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MinFilter>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class WrapS 
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static WrapS FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<WrapS>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class WrapT 
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static WrapT FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<WrapT>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class InverseBindMatrices : int
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static InverseBindMatrices FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InverseBindMatrices>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class Skeleton : int
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Skeleton FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Skeleton>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class Sampler2 : int
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Sampler2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Sampler2>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class Source : int
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Source FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Source>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class Asset : Json13
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Asset FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Asset>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.34.6331.29178")]
    public partial class Scene : int
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Scene FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Scene>(data);
        }
    }
}